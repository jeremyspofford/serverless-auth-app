{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#serverless-auth-application","title":"Serverless Auth Application","text":""},{"location":"#overview","title":"Overview","text":"<p>A complete serverless authentication application built with AWS CDK, Lambda, and LocalStack for local development.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li>Project Setup</li> <li>Current Status</li> <li>CDK Concepts</li> </ul>"},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Backend: AWS Lambda (TypeScript)</li> <li>Infrastructure: AWS CDK</li> <li>Local Dev: LocalStack + Docker</li> <li>API: API Gateway</li> <li>Database: DynamoDB</li> <li>Auth: AWS Cognito (planned)</li> </ul>"},{"location":"AWS_CDK_CONCEPTS/","title":"AWS CDK Concepts &amp; Learning Guide","text":""},{"location":"AWS_CDK_CONCEPTS/#what-is-aws-cdk","title":"What is AWS CDK?","text":"<p>AWS Cloud Development Kit (CDK) is Infrastructure as Code (IaC) that lets you define AWS resources using familiar programming languages instead of YAML/JSON templates.</p>"},{"location":"AWS_CDK_CONCEPTS/#cdk-vs-other-tools","title":"CDK vs Other Tools","text":"Tool Format Learning Curve Power CDK TypeScript/Python/Java Medium High CloudFormation YAML/JSON Low Medium Terraform HCL Medium High Serverless Framework YAML Low Medium <p>Why CDK for DevOps: Real programming language means loops, conditions, functions, and IDE support with autocomplete.</p>"},{"location":"AWS_CDK_CONCEPTS/#core-cdk-concepts","title":"Core CDK Concepts","text":""},{"location":"AWS_CDK_CONCEPTS/#1-constructs-building-blocks","title":"1. Constructs - Building Blocks","text":"<p>What they are: Reusable cloud components that represent AWS resources.</p> <pre><code>// A construct is like a LEGO piece for AWS infrastructure\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\n\n// This construct represents a Lambda function\nconst myFunction = new lambda.Function(this, 'MyFunction', {\n  runtime: lambda.Runtime.NODEJS_20_X,\n  handler: 'index.handler',\n  code: lambda.Code.fromAsset('dist')\n});\n</code></pre> <p>Think of constructs as: - Low-level: Direct 1:1 mapping to CloudFormation (e.g., <code>CfnFunction</code>) - High-level: Opinionated best practices (e.g., <code>Function</code>) - Patterns: Multiple resources working together (e.g., <code>ApplicationLoadBalancedFargateService</code>)</p>"},{"location":"AWS_CDK_CONCEPTS/#2-stacks-deployment-units","title":"2. Stacks - Deployment Units","text":"<p>What they are: Groups of related resources that get deployed together.</p> <pre><code>export class MyStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // All resources in this stack get deployed together\n    const lambda = new lambda.Function(/* ... */);\n    const api = new apigateway.RestApi(/* ... */);\n  }\n}\n</code></pre> <p>Think of stacks as: Deployment boundaries - everything in one stack deploys/updates/deletes together.</p>"},{"location":"AWS_CDK_CONCEPTS/#3-apps-top-level-container","title":"3. Apps - Top-Level Container","text":"<p>What they are: Contains one or more stacks, represents your entire application.</p> <pre><code>const app = new cdk.App();\nnew MyStack(app, 'MyStack');\nnew DatabaseStack(app, 'DatabaseStack');\n</code></pre> <p>Hierarchy: <code>App</code> \u2192 <code>Stack</code> \u2192 <code>Construct</code> \u2192 AWS Resources</p>"},{"location":"AWS_CDK_CONCEPTS/#the-three-cdk-terms-you-asked-about","title":"The Three CDK Terms You Asked About","text":""},{"location":"AWS_CDK_CONCEPTS/#1-import-necessary-constructs","title":"1. \"Import Necessary Constructs\"","text":"<p>What this means: Bring in the CDK libraries for the AWS services you want to use.</p> <pre><code>// These are the \"constructs\" - pre-built components for AWS services\nimport * as lambda from 'aws-cdk-lib/aws-lambda';        // For Lambda functions\nimport * as apigateway from 'aws-cdk-lib/aws-apigateway'; // For API Gateway\nimport * as dynamodb from 'aws-cdk-lib/aws-dynamodb';     // For DynamoDB\nimport { Construct } from 'constructs';                    // Base construct class\n</code></pre> <p>Why needed: CDK doesn't import everything by default - you only import what you use for smaller bundle sizes.</p> <p>Real-world analogy: Like importing specific tools from a toolbox instead of carrying the entire toolbox.</p>"},{"location":"AWS_CDK_CONCEPTS/#2-create-lambda-function-pointing-to-your-compiled-typescript","title":"2. \"Create Lambda Function Pointing to Your Compiled TypeScript\"","text":"<p>What this means: Tell CDK where your Lambda code lives and how to configure it.</p> <pre><code>const helloLambda = new lambda.Function(this, 'HelloHandler', {\n  runtime: lambda.Runtime.NODEJS_20_X,           // Which Node.js version\n  code: lambda.Code.fromAsset('../../backend/dist'), // Where your compiled JS is\n  handler: 'index.handler',                       // Which function to call\n  timeout: cdk.Duration.seconds(30),            // How long it can run\n  environment: {                                 // Environment variables\n    NODE_ENV: 'development'\n  }\n});\n</code></pre> <p>Breaking it down: - <code>this</code>: Add this Lambda to the current stack - <code>'HelloHandler'</code>: Logical name for this Lambda (CDK will create unique AWS name) - <code>runtime</code>: Tell AWS which Node.js version to use - <code>code.fromAsset()</code>: Point to your compiled JavaScript files - <code>handler</code>: <code>index.handler</code> means call <code>handler</code> function in <code>index.js</code></p> <p>Real-world analogy: Like telling a chef (AWS) which recipe book (your code) to use and which recipe (handler function) to make.</p>"},{"location":"AWS_CDK_CONCEPTS/#3-set-up-api-gateway-with-lambda-integration","title":"3. \"Set Up API Gateway with Lambda Integration\"","text":"<p>What this means: Create a REST API that forwards requests to your Lambda function.</p> <pre><code>// Step 1: Create the API Gateway\nconst api = new apigateway.RestApi(this, 'MyApi', {\n  restApiName: 'My Serverless API',\n  description: 'API for my serverless app'\n});\n\n// Step 2: Create the integration (connection between API and Lambda)\nconst lambdaIntegration = new apigateway.LambdaIntegration(helloLambda);\n\n// Step 3: Add routes (URL paths) that trigger the Lambda\napi.root.addMethod('GET', lambdaIntegration);     // GET /\napi.root.addResource('users').addMethod('POST', lambdaIntegration); // POST /users\n</code></pre> <p>What happens: 1. User makes HTTP request \u2192 <code>GET https://api.example.com/</code> 2. API Gateway receives it \u2192 Routes to Lambda function 3. Lambda processes request \u2192 Returns response 4. API Gateway sends response \u2192 Back to user</p> <p>Real-world analogy: API Gateway is like a receptionist who routes phone calls (HTTP requests) to the right department (Lambda function).</p>"},{"location":"AWS_CDK_CONCEPTS/#cdk-workflow-for-your-project","title":"CDK Workflow for Your Project","text":""},{"location":"AWS_CDK_CONCEPTS/#development-cycle","title":"Development Cycle","text":"<pre><code>graph LR\n    A[Write CDK Code] --&gt; B[CDK Synth]\n    B --&gt; C[CloudFormation Template]\n    C --&gt; D[CDK Deploy]\n    D --&gt; E[AWS Resources Created]\n    E --&gt; F[Test &amp; Iterate]\n    F --&gt; A\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#your-specific-steps","title":"Your Specific Steps","text":"<ol> <li> <p>Write Infrastructure Code (TypeScript)    <code>typescript    // Define what you want: Lambda + API Gateway    const lambda = new lambda.Function(/* config */);    const api = new apigateway.RestApi(/* config */);    api.root.addMethod('GET', new apigateway.LambdaIntegration(lambda));</code></p> </li> <li> <p>CDK Synthesizes (Converts to CloudFormation)    <code>bash    npx cdk synth  # Creates CloudFormation JSON</code></p> </li> <li> <p>CDK Deploys (Creates AWS Resources)    <code>bash    npx cdklocal deploy  # Creates actual Lambda &amp; API Gateway in LocalStack</code></p> </li> </ol>"},{"location":"AWS_CDK_CONCEPTS/#common-cdk-patterns-youll-use","title":"Common CDK Patterns You'll Use","text":""},{"location":"AWS_CDK_CONCEPTS/#pattern-1-lambda-api-gateway-your-current-project","title":"Pattern 1: Lambda + API Gateway (Your Current Project)","text":"<pre><code>const lambda = new lambda.Function(this, 'Handler', { /* config */ });\nconst api = new apigateway.RestApi(this, 'Api', { /* config */ });\napi.root.addMethod('GET', new apigateway.LambdaIntegration(lambda));\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#pattern-2-lambda-dynamodb-next-phase","title":"Pattern 2: Lambda + DynamoDB (Next Phase)","text":"<pre><code>const table = new dynamodb.Table(this, 'UsersTable', {\n  partitionKey: { name: 'userId', type: dynamodb.AttributeType.STRING }\n});\n\nconst lambda = new lambda.Function(this, 'Handler', { /* config */ });\ntable.grantReadWriteData(lambda);  // Gives Lambda permission to access table\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#pattern-3-multiple-environments","title":"Pattern 3: Multiple Environments","text":"<pre><code>// Different configurations for dev/prod\nconst isProd = props.stage === 'production';\nconst lambda = new lambda.Function(this, 'Handler', {\n  timeout: isProd ? cdk.Duration.seconds(30) : cdk.Duration.seconds(60),\n  memorySize: isProd ? 512 : 128\n});\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#cdk-best-practices-for-devops","title":"CDK Best Practices for DevOps","text":""},{"location":"AWS_CDK_CONCEPTS/#1-organize-by-logical-boundaries","title":"1. Organize by Logical Boundaries","text":"<pre><code>infrastructure/\n\u251c\u2500\u2500 lib/\n\u2502   \u251c\u2500\u2500 auth-stack.ts      # Cognito, IAM\n\u2502   \u251c\u2500\u2500 api-stack.ts       # API Gateway, Lambda\n\u2502   \u251c\u2500\u2500 database-stack.ts  # DynamoDB\n\u2502   \u2514\u2500\u2500 monitoring-stack.ts # CloudWatch\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#2-use-environment-variables","title":"2. Use Environment Variables","text":"<pre><code>const stage = process.env.STAGE || 'dev';\nconst lambda = new lambda.Function(this, `Handler-${stage}`, {\n  functionName: `myapp-handler-${stage}`\n});\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#3-output-important-values","title":"3. Output Important Values","text":"<pre><code>new cdk.CfnOutput(this, 'ApiUrl', {\n  value: api.url,\n  description: 'API Gateway URL for testing'\n});\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#4-tag-everything-for-cost-tracking","title":"4. Tag Everything for Cost Tracking","text":"<pre><code>cdk.Tags.of(this).add('Project', 'ServerlessAuth');\ncdk.Tags.of(this).add('Environment', stage);\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#common-cdk-gotchas","title":"Common CDK Gotchas","text":""},{"location":"AWS_CDK_CONCEPTS/#1-asset-path-issues","title":"1. Asset Path Issues","text":"<pre><code>// \u274c Wrong - relative to CDK code\ncode: lambda.Code.fromAsset('./backend/dist')\n\n// \u2705 Correct - relative path properly calculated\ncode: lambda.Code.fromAsset(path.join(__dirname, '../../backend/dist'))\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#2-missing-permissions","title":"2. Missing Permissions","text":"<pre><code>// \u274c Lambda can't access DynamoDB\nconst table = new dynamodb.Table(/* ... */);\nconst lambda = new lambda.Function(/* ... */);\n\n// \u2705 Explicit permission grant\ntable.grantReadWriteData(lambda);\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#3-deployment-order","title":"3. Deployment Order","text":"<pre><code>// CDK automatically handles dependencies\nconst lambda = new lambda.Function(/* ... */);\nconst api = new apigateway.RestApi(/* ... */);\napi.root.addMethod('GET', new apigateway.LambdaIntegration(lambda));\n// CDK knows to create Lambda first, then API Gateway\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#learning-path-for-cdk","title":"Learning Path for CDK","text":""},{"location":"AWS_CDK_CONCEPTS/#beginner-your-current-level","title":"Beginner (Your Current Level)","text":"<ul> <li>[x] Understand constructs, stacks, apps</li> <li>[x] Create Lambda function</li> <li>[x] Set up API Gateway integration</li> <li>[ ] Deploy to LocalStack</li> <li>[ ] Add environment variables</li> </ul>"},{"location":"AWS_CDK_CONCEPTS/#intermediate-next-steps","title":"Intermediate (Next Steps)","text":"<ul> <li>[ ] Add DynamoDB table</li> <li>[ ] Implement IAM permissions</li> <li>[ ] Add Cognito user pool</li> <li>[ ] Create multiple environments</li> <li>[ ] Add CloudWatch monitoring</li> </ul>"},{"location":"AWS_CDK_CONCEPTS/#advanced-future-goals","title":"Advanced (Future Goals)","text":"<ul> <li>[ ] Custom constructs</li> <li>[ ] Cross-stack references</li> <li>[ ] CDK Pipelines (CI/CD)</li> <li>[ ] Testing CDK code</li> <li>[ ] CDK aspects for compliance</li> </ul>"},{"location":"AWS_CDK_CONCEPTS/#useful-cdk-commands","title":"Useful CDK Commands","text":"<pre><code># Basic commands\nnpx cdk init app --language typescript  # Create new CDK app\nnpx cdk synth                          # Generate CloudFormation\nnpx cdk deploy                         # Deploy to AWS\nnpx cdk destroy                        # Remove all resources\nnpx cdk diff                          # Show changes\n\n# LocalStack commands (for local development)\nnpx cdklocal bootstrap                 # Setup CDK for LocalStack\nnpx cdklocal deploy                    # Deploy to LocalStack\nnpx cdklocal destroy                   # Remove from LocalStack\n\n# Useful flags\nnpx cdk deploy --require-approval never # Don't ask for confirmation\nnpx cdk deploy --hotswap               # Fast deployment for dev\nnpx cdk deploy --profile myprofile     # Use specific AWS profile\n</code></pre>"},{"location":"AWS_CDK_CONCEPTS/#next-steps-when-you-return","title":"Next Steps When You Return","text":"<ol> <li>Install CDK dependencies in your infrastructure project</li> <li>Configure your CDK stack with the Lambda and API Gateway constructs</li> <li>Test the deployment to LocalStack</li> <li>Understand the generated CloudFormation to see what CDK created</li> <li>Add more functionality like DynamoDB and error handling</li> </ol> <p>Remember: CDK is just a tool that generates CloudFormation - understanding what AWS resources you're creating is more important than memorizing CDK syntax!</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/","title":"Project Setup Cheatsheet","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#aws-serverless-application-with-cdk-typescript","title":"AWS Serverless Application with CDK &amp; TypeScript","text":"<p>This cheatsheet provides a step-by-step blueprint for setting up AWS serverless projects with modern DevOps practices.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#prerequisites-checklist","title":"Prerequisites Checklist","text":"<ul> <li>[ ] AWS Account configured</li> <li>[ ] AWS CLI installed and configured (<code>aws configure</code>)</li> <li>[ ] mise installed (<code>curl https://mise.run | sh</code>) - for version management</li> <li>[ ] Node.js 20+ installed via mise (<code>mise use node@20</code>)</li> <li>[ ] Git installed (<code>git --version</code>)</li> <li>[ ] CDK CLI installed (<code>npm install -g aws-cdk</code>)</li> </ul>"},{"location":"PROJECT_SETUP_CHEATSHEET/#1-project-initialization","title":"1. Project Initialization","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#set-up-version-management-with-mise","title":"Set Up Version Management with mise","text":"<pre><code># Create mise configuration for consistent tooling\ncat &gt; .mise.toml &lt;&lt; 'EOF'\n[tools]\nnode = \"20.11.0\"    # Latest Node.js that Lambda supports\npython = \"3.12\"     # For AWS CLI and CDK\naws-cdk = \"latest\"  # Infrastructure as Code tool\nEOF\n\n# Or use the simpler .tool-versions format\ncat &gt; .tool-versions &lt;&lt; 'EOF'\nnode 20.11.0\npython 3.12\nEOF\n\n# Install and activate the specified versions\nmise install\nmise use\n\n# Verify correct versions are active\nnode --version  # Should show v20.11.0\n</code></pre> <p>Why: Ensures all developers and CI/CD use identical tool versions, matching Lambda's runtime. Prevents \"works on my machine\" issues.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#create-base-directory-structure","title":"Create Base Directory Structure","text":"<pre><code># Create the main project directory\nmkdir &lt;project-name&gt; &amp;&amp; cd &lt;project-name&gt;\n\n# Initialize git repository (do this first for proper .gitignore)\ngit init\n\n# Create folder structure for serverless application\nmkdir -p backend/src backend/tests frontend infrastructure .github/workflows\n</code></pre> <p>Why: Organized structure separates concerns - backend logic, frontend assets, infrastructure code, and CI/CD pipelines.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#2-infrastructure-setup-cdk-with-typescript","title":"2. Infrastructure Setup (CDK with TypeScript)","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#initialize-cdk-project","title":"Initialize CDK Project","text":"<pre><code># Navigate to infrastructure directory\ncd infrastructure\n\n# Initialize CDK app with TypeScript\n# This creates a complete CDK project with TypeScript config, sample stack, and dependencies\nnpx cdk init app --language typescript\n\n# Install additional CDK constructs as needed\nnpm install @aws-cdk/aws-lambda-nodejs-alpha\n</code></pre> <p>Why: CDK init creates all boilerplate for Infrastructure as Code - including tsconfig, jest tests, and CDK app entry point.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#verify-cdk-setup","title":"Verify CDK Setup","text":"<pre><code># Bootstrap CDK (first time only per AWS account/region)\n# This creates an S3 bucket for CDK assets and IAM roles\ncdk bootstrap\n\n# List stacks (should show your app stack)\ncdk list\n</code></pre> <p>Why: Bootstrap prepares your AWS account for CDK deployments. Required once per account/region.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#3-backend-setup-lambda-functions-with-typescript","title":"3. Backend Setup (Lambda Functions with TypeScript)","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#initialize-typescript-backend","title":"Initialize TypeScript Backend","text":"<pre><code># Navigate to backend directory\ncd ../backend\n\n# Initialize Node.js project\nnpm init -y\n\n# Install TypeScript and AWS dependencies\nnpm install --save-dev typescript @types/node @types/aws-lambda esbuild\nnpm install aws-sdk\n\n# Initialize TypeScript configuration\nnpx tsc --init\n</code></pre> <p>Why: Sets up TypeScript compilation for Lambda functions with proper typing for AWS services.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#configure-typescript-for-lambda","title":"Configure TypeScript for Lambda","text":"<pre><code># Update tsconfig.json with Lambda-optimized settings\ncat &gt; tsconfig.json &lt;&lt; 'EOF'\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2023\",      # Node 20 supports ES2023\n    \"module\": \"commonjs\",    # Lambda expects CommonJS\n    \"lib\": [\"ES2023\"],\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"declaration\": true,\n    \"declarationMap\": true,\n    \"sourceMap\": true\n  },\n  \"include\": [\"src/**/*\"],\n  \"exclude\": [\"node_modules\", \"dist\", \"tests\"]\n}\nEOF\n</code></pre> <p>Why: Configures TypeScript for Node.js 20 Lambda runtime with proper module resolution and type checking. Uses CommonJS for Lambda compatibility.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#add-build-scripts","title":"Add Build Scripts","text":"<pre><code># Update package.json scripts section\nnpm pkg set scripts.build=\"tsc\"\nnpm pkg set scripts.watch=\"tsc -w\"\nnpm pkg set scripts.test=\"jest\"\nnpm pkg set scripts.lint=\"eslint src/\"\n</code></pre> <p>Why: Standard scripts for building, testing, and linting your Lambda functions.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#4-frontend-setup-static-spa","title":"4. Frontend Setup (Static SPA)","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#initialize-frontend","title":"Initialize Frontend","text":"<pre><code># Navigate to frontend directory\ncd ../frontend\n\n# For React/Vue/Angular projects:\n# npx create-react-app . --template typescript\n# OR\n# npm create vite@latest . -- --template react-ts\n\n# For vanilla HTML/CSS/JS (simple start):\ntouch index.html app.js style.css\n</code></pre> <p>Why: Frontend will be deployed to S3 and served via CloudFront. Choose framework based on project needs.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#5-cicd-setup-github-actions","title":"5. CI/CD Setup (GitHub Actions)","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#create-basic-workflow","title":"Create Basic Workflow","text":"<pre><code># Create GitHub Actions workflow\ncat &gt; ../.github/workflows/deploy.yml &lt;&lt; 'EOF'\nname: Deploy to AWS\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - run: |\n          cd backend\n          npm ci\n          npm test\n          npm run build\n\n  deploy:\n    needs: test\n    if: github.ref == 'refs/heads/main'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n      - name: Deploy CDK\n        run: |\n          cd infrastructure\n          npm ci\n          npx cdk deploy --require-approval never\nEOF\n</code></pre> <p>Why: Automates testing and deployment on every push to main branch. Ensures code quality and consistent deployments.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#6-local-development-setup","title":"6. Local Development Setup","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#choose-your-local-development-environment","title":"Choose Your Local Development Environment","text":"<p>Before deploying to AWS, you'll want to run and test your serverless application locally. Here are your options:</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#option-1-localstack-recommended-for-devops","title":"Option 1: LocalStack (Recommended for DevOps)","text":"<p>What it is: Docker-based AWS service emulator that runs 80+ AWS services locally.</p> <pre><code># Install LocalStack CLI\npip install localstack\n\n# Start LocalStack (basic services)\nlocalstack start\n\n# Or with Docker Compose (add to docker-compose.yml):\nversion: '3.8'\nservices:\n  localstack:\n    image: localstack/localstack:latest\n    ports:\n      - \"4566:4566\"\n    environment:\n      - SERVICES=lambda,apigateway,dynamodb,s3,cognito-idp,cloudformation\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n\n# Deploy CDK to LocalStack instead of AWS\ncdklocal deploy\n</code></pre> <p>Pros: - Most comprehensive: 80+ AWS services (Lambda, DynamoDB, S3, Cognito, CloudFormation, etc.) - Realistic simulation: Uses same APIs as real AWS - CDK/SAM compatible: Deploy infrastructure locally - Perfect for DevOps: Test entire infrastructure stack - Persistent data: Survives container restarts with proper config - CI/CD friendly: Great for integration tests</p> <p>Cons: - Resource intensive: Requires Docker and decent RAM - Setup complexity: More moving parts than simple alternatives - Pro features: Advanced services require paid license</p> <p>Free vs Pro: - Community (Free): Core services (Lambda, API Gateway, DynamoDB, S3, IAM basics) - Pro ($25-99/month): Advanced features, persistence, multi-region, extended services</p> <p>When to choose:  - Complex multi-service applications - DevOps/infrastructure testing - Team environments - Need realistic AWS behavior</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#option-2-aws-sam-cli","title":"Option 2: AWS SAM CLI","text":"<p>What it is: Official AWS tool for running Lambda and API Gateway locally.</p> <pre><code># Install SAM CLI\n# Create template.yaml in project root\nsam local start-api --port 3001\n\n# Run specific Lambda\nsam local invoke HelloFunction\n\n# Start DynamoDB separately\ndocker run -p 8000:8000 amazon/dynamodb-local\n</code></pre> <p>Pros: - Official AWS tool: Most accurate Lambda simulation - Simple setup: Works out of the box - Good documentation: Extensive AWS support - Free forever: No licensing costs - Docker-based: Consistent runtime environment</p> <p>Cons: - Limited services: Mainly Lambda + API Gateway - Separate containers: Need multiple tools for full stack - No infrastructure: Can't test CDK deployments locally - Manual configuration: Each service configured separately</p> <p>When to choose: - Simple Lambda functions - Official AWS tooling preference - Learning serverless basics - Minimal local testing needs</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#option-3-serverless-framework-offline","title":"Option 3: Serverless Framework Offline","text":"<p>What it is: Popular serverless plugin for local development.</p> <pre><code># Install Serverless Framework\nnpm install -g serverless\nnpm install --save-dev serverless-offline\n\n# Add to serverless.yml\nplugins:\n  - serverless-offline\n\n# Start local development\nserverless offline start\n</code></pre> <p>Pros: - Hot reload: Automatic code reloading - Plugin ecosystem: Many community plugins - Simple config: YAML-based configuration - Good for development: Fast iteration cycle</p> <p>Cons: - Limited AWS services: Mainly Lambda + HTTP - Different from CDK: Uses Serverless Framework, not CDK - Framework lock-in: Requires Serverless Framework config - Less realistic: Simplified AWS simulation</p> <p>When to choose: - Using Serverless Framework (not CDK) - Rapid development iteration - Simple API development - Don't need infrastructure testing</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#option-4-expressjs-wrapper-quick-testing","title":"Option 4: Express.js Wrapper (Quick Testing)","text":"<p>What it is: Wrap Lambda handlers in Express for quick local testing.</p> <pre><code>// backend/src/local-dev.ts\nimport express from 'express';\nimport { handler } from './index';\n\nconst app = express();\napp.use(express.json());\n\napp.get('/', async (req, res) =&gt; {\n  // Convert Express request to Lambda event\n  const event = {\n    httpMethod: 'GET',\n    path: req.path,\n    queryStringParameters: req.query,\n    headers: req.headers,\n    body: JSON.stringify(req.body),\n    requestContext: { requestId: 'local-' + Date.now() }\n  };\n\n  const result = await handler(event as any, {} as any);\n  res.status(result.statusCode).json(JSON.parse(result.body));\n});\n\napp.listen(3000, () =&gt; console.log('Local Lambda on port 3000'));\n</code></pre> <p>Pros: - Fastest setup: Just Node.js, no Docker - Familiar: Standard Express.js development - Lightweight: Minimal resource usage - Debugging friendly: Easy to add breakpoints</p> <p>Cons: - Not realistic: Missing Lambda runtime constraints - Manual mapping: Convert between Express and Lambda formats - No other AWS services: Just HTTP endpoints - Maintenance overhead: Keep wrapper in sync with Lambda changes</p> <p>When to choose: - Quick prototyping - No Docker available - Simple HTTP API testing - Familiar with Express.js</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#recommendation-matrix","title":"Recommendation Matrix","text":"Use Case Recommended Tool Why DevOps/Infrastructure LocalStack Full AWS stack, infrastructure testing Simple Lambda APIs SAM CLI Official tool, realistic Lambda runtime Rapid Prototyping Express Wrapper Fastest iteration, familiar tools Serverless Framework Users Serverless Offline Matches deployment tool Learning/Education SAM CLI Official, good documentation Enterprise/Teams LocalStack Pro Advanced features, team collaboration"},{"location":"PROJECT_SETUP_CHEATSHEET/#7-docker-multi-environment-setup","title":"7. Docker Multi-Environment Setup","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#create-docker-compose-structure","title":"Create Docker Compose Structure","text":"<pre><code># Base configuration (shared services)\ncat &gt; docker-compose.base.yml &lt;&lt; 'EOF'\nversion: '3.8'\nservices:\n  backend:\n    build:\n      context: ./backend\n      dockerfile: Dockerfile\n    networks:\n      - serverless-network\n\nvolumes:\n  localstack-data:\n\nnetworks:\n  serverless-network:\n    driver: bridge\nEOF\n\n# Development overrides\ncat &gt; docker-compose.dev.yml &lt;&lt; 'EOF'\nversion: '3.8'\nservices:\n  localstack:\n    image: localstack/localstack:latest\n    container_name: serverless-localstack\n    ports:\n      - \"4566:4566\"\n    environment:\n      - SERVICES=lambda,apigateway,dynamodb,s3,cognito-idp,cloudformation,iam,sts\n      - DEBUG=1\n      - LAMBDA_EXECUTOR=docker\n      - DOCKER_HOST=unix:///var/run/docker.sock\n    volumes:\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n      - \"localstack-data:/var/lib/localstack\"\n    networks:\n      - serverless-network\n\n  backend:\n    build:\n      target: builder\n    container_name: serverless-backend-dev\n    volumes:\n      - ./backend/src:/app/src\n      - ./backend/dist:/app/dist\n    environment:\n      - NODE_ENV=development\n      - AWS_ENDPOINT_URL=http://localstack:4566\n      - AWS_REGION=us-east-1\n      - AWS_ACCESS_KEY_ID=test\n      - AWS_SECRET_ACCESS_KEY=test\n    depends_on:\n      - localstack\n    command: npm run watch\n\n  test:\n    build:\n      context: ./backend\n      target: builder\n    container_name: serverless-tests\n    volumes:\n      - ./backend:/app\n    environment:\n      - NODE_ENV=test\n      - AWS_ENDPOINT_URL=http://localstack:4566\n    depends_on:\n      - localstack\n    networks:\n      - serverless-network\n    command: npm run test:watch\n    profiles:\n      - test\nEOF\n\n# Production overrides\ncat &gt; docker-compose.prod.yml &lt;&lt; 'EOF'\nversion: '3.8'\nservices:\n  backend:\n    build:\n      target: production\n    container_name: serverless-backend-prod\n    environment:\n      - NODE_ENV=production\n      - AWS_REGION=${AWS_REGION:-us-east-1}\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\nEOF\n</code></pre> <p>Why Multi-file Compose: Separates concerns, avoids duplication, enables environment-specific configuration without code changes.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#create-convenience-scripts","title":"Create Convenience Scripts","text":"<pre><code># Create scripts directory\nmkdir scripts\n\n# Development script\ncat &gt; scripts/dev.sh &lt;&lt; 'EOF'\n#!/bin/bash\ndocker-compose -f docker-compose.base.yml -f docker-compose.dev.yml up --build \"$@\"\nEOF\n\n# Test script\ncat &gt; scripts/test.sh &lt;&lt; 'EOF'\n#!/bin/bash\ndocker-compose -f docker-compose.base.yml -f docker-compose.dev.yml --profile test up \"$@\"\nEOF\n\n# Production script\ncat &gt; scripts/prod.sh &lt;&lt; 'EOF'\n#!/bin/bash\ndocker-compose -f docker-compose.base.yml -f docker-compose.prod.yml up --build \"$@\"\nEOF\n\n# Make scripts executable\nchmod +x scripts/*.sh\n</code></pre>"},{"location":"PROJECT_SETUP_CHEATSHEET/#docker-commands-reference","title":"Docker Commands Reference","text":"<pre><code># Development with LocalStack\ndocker-compose -f docker-compose.base.yml -f docker-compose.dev.yml up --build\n\n# Development with tests\ndocker-compose -f docker-compose.base.yml -f docker-compose.dev.yml --profile test up\n\n# Production\ndocker-compose -f docker-compose.base.yml -f docker-compose.prod.yml up\n\n# Using convenience scripts\n./scripts/dev.sh        # Start development environment\n./scripts/test.sh       # Start with test runner\n./scripts/prod.sh       # Start production environment\n</code></pre>"},{"location":"PROJECT_SETUP_CHEATSHEET/#8-cdk-infrastructure-setup","title":"8. CDK Infrastructure Setup","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#install-cdk-dependencies","title":"Install CDK Dependencies","text":"<pre><code># Add AWS CLI to mise for system-level AWS operations\necho \"aws-cli latest\" &gt;&gt; .tool-versions\nmise install\n\n# Install CDK at project level (recommended approach)\ncd infrastructure\nnpm install --save-dev aws-cdk aws-cdk-local\nnpm install --save-dev @aws-cdk/aws-lambda-nodejs-alpha\nnpm install aws-cdk-lib constructs\n</code></pre> <p>Why hybrid approach: System tools (aws-cli) via mise for consistency, project tools (CDK) via npm for version control.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#configure-cdk-stack-for-localstack","title":"Configure CDK Stack for LocalStack","text":"<pre><code>// infrastructure/lib/infrastructure-stack.ts\nimport * as cdk from 'aws-cdk-lib';\nimport * as lambda from 'aws-cdk-lib/aws-lambda';\nimport * as apigateway from 'aws-cdk-lib/aws-apigateway';\nimport { Construct } from 'constructs';\nimport * as path from 'path';\n\nexport class InfrastructureStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    // Lambda function pointing to compiled TypeScript\n    const helloLambda = new lambda.Function(this, 'HelloHandler', {\n      runtime: lambda.Runtime.NODEJS_20_X,\n      code: lambda.Code.fromAsset(path.join(__dirname, '../../backend/dist')),\n      handler: 'index.handler',\n      timeout: cdk.Duration.seconds(30),\n      environment: {\n        NODE_ENV: process.env.NODE_ENV || 'development',\n      },\n    });\n\n    // API Gateway with CORS\n    const api = new apigateway.RestApi(this, 'ServerlessAuthApi', {\n      restApiName: 'Serverless Auth Service',\n      defaultCorsPreflightOptions: {\n        allowOrigins: apigateway.Cors.ALL_ORIGINS,\n        allowMethods: apigateway.Cors.ALL_METHODS,\n        allowHeaders: ['Content-Type', 'Authorization'],\n      },\n    });\n\n    // Connect Lambda to API Gateway\n    const integration = new apigateway.LambdaIntegration(helloLambda);\n    api.root.addMethod('GET', integration);\n\n    // Health check endpoint\n    api.root.addResource('health').addMethod('GET', integration);\n\n    // Output API URL for testing\n    new cdk.CfnOutput(this, 'ApiUrl', {\n      value: api.url,\n      description: 'API Gateway URL',\n    });\n  }\n}\n</code></pre>"},{"location":"PROJECT_SETUP_CHEATSHEET/#development-workflow","title":"Development Workflow","text":"<pre><code># 1. Start LocalStack\n./scripts/dev.sh\n\n# 2. Build Lambda function\ncd backend &amp;&amp; npm run build\n\n# 3. Deploy to LocalStack (first time)\ncd ../infrastructure\nnpx cdklocal bootstrap\n\n# 4. Deploy infrastructure\nnpx cdklocal deploy\n\n# 5. Test API\ncurl http://localhost:4566/restapis/[api-id]/dev/_user_request_/\n</code></pre>"},{"location":"PROJECT_SETUP_CHEATSHEET/#cdk-commands-reference","title":"CDK Commands Reference","text":"<pre><code># LocalStack commands\nnpx cdklocal bootstrap    # Setup CDK in LocalStack (one time)\nnpx cdklocal deploy       # Deploy to LocalStack\nnpx cdklocal destroy      # Remove from LocalStack\nnpx cdklocal diff         # Show changes to be deployed\n\n# Real AWS commands (for production)\nnpx cdk bootstrap         # Setup CDK in AWS account (one time)\nnpx cdk deploy           # Deploy to AWS\nnpx cdk destroy          # Remove from AWS\nnpx cdk synth            # Generate CloudFormation template\n</code></pre> <p>Important: Always build your Lambda code (<code>npm run build</code>) before deploying CDK.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#9-environment-configuration","title":"9. Environment Configuration","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#create-environment-files","title":"Create Environment Files","text":"<pre><code># Development environment variables\ncat &gt; .env.development &lt;&lt; 'EOF'\nAWS_REGION=us-east-1\nSTAGE=dev\nEOF\n\n# Production environment variables (don't commit secrets!)\ncat &gt; .env.production &lt;&lt; 'EOF'\nAWS_REGION=us-east-1\nSTAGE=prod\nEOF\n\n# Add to .gitignore\necho \".env*\" &gt;&gt; .gitignore\n</code></pre> <p>Why: Separates configuration from code. Never commit secrets - use AWS Secrets Manager or Parameter Store.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#7-documentation-setup","title":"7. Documentation Setup","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#create-readme","title":"Create README","text":"<pre><code>cat &gt; README.md &lt;&lt; 'EOF'\n# Project Name\n\n## Description\nBrief description of the project\n\n## Architecture\n- Frontend: S3 + CloudFront\n- Backend: API Gateway + Lambda\n- Database: DynamoDB\n- Auth: Cognito\n- IaC: AWS CDK with TypeScript\n\n## Setup\n1. Clone repository\n2. Install dependencies: `npm install`\n3. Configure AWS credentials\n4. Deploy: `cdk deploy`\n\n## Development\n- Backend: `cd backend &amp;&amp; npm run watch`\n- Frontend: `cd frontend &amp;&amp; npm start`\n- Infrastructure: `cd infrastructure &amp;&amp; cdk diff`\n\n## Testing\n- Unit tests: `npm test`\n- Integration tests: `npm run test:integration`\nEOF\n</code></pre> <p>Why: Documentation is crucial for team collaboration and future maintenance.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#8-git-configuration","title":"8. Git Configuration","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#initialize-git-and-first-commit","title":"Initialize Git and First Commit","text":"<pre><code># Create comprehensive .gitignore\ncat &gt; .gitignore &lt;&lt; 'EOF'\n# Dependencies\nnode_modules/\n*.log\n\n# Build outputs\ndist/\nbuild/\n*.js\n*.d.ts\n*.js.map\n!jest.config.js\n\n# CDK\n*.swp\n.cdk.staging\ncdk.out\n\n# Environment\n.env*\n!.env.example\n\n# IDE\n.vscode/\n.idea/\n\n# OS\n.DS_Store\nEOF\n\n# Initial commit\ngit add .\ngit commit -m \"Initial project setup with CDK and TypeScript\"\n</code></pre> <p>Why: Proper .gitignore prevents committing sensitive data and unnecessary files.</p>"},{"location":"PROJECT_SETUP_CHEATSHEET/#common-commands-reference","title":"Common Commands Reference","text":""},{"location":"PROJECT_SETUP_CHEATSHEET/#cdk-commands","title":"CDK Commands","text":"<pre><code>cdk init          # Initialize new CDK project\ncdk list          # List all stacks\ncdk diff          # Show changes to be deployed\ncdk deploy        # Deploy stack to AWS\ncdk destroy       # Remove stack from AWS\ncdk synth         # Generate CloudFormation template\n</code></pre>"},{"location":"PROJECT_SETUP_CHEATSHEET/#development-commands","title":"Development Commands","text":"<pre><code>npm run build     # Compile TypeScript\nnpm run watch     # Watch mode for development\nnpm test          # Run tests\nnpm run lint      # Check code quality\n</code></pre>"},{"location":"PROJECT_SETUP_CHEATSHEET/#next-steps-after-setup","title":"Next Steps After Setup","text":"<ol> <li>[ ] Create first Lambda function</li> <li>[ ] Define CDK stack for resources</li> <li>[ ] Set up Cognito user pool</li> <li>[ ] Configure API Gateway</li> <li>[ ] Add DynamoDB table</li> <li>[ ] Deploy to AWS</li> <li>[ ] Set up monitoring with CloudWatch</li> </ol>"},{"location":"PROJECT_SETUP_CHEATSHEET/#tips","title":"Tips","text":"<ul> <li>Always use TypeScript for type safety</li> <li>Keep Lambda functions small and focused</li> <li>Use environment variables for configuration</li> <li>Tag all AWS resources for cost tracking</li> <li>Set up alerts for errors and throttling</li> <li>Use structured logging (JSON format)</li> <li>Implement proper error handling</li> <li>Follow least privilege principle for IAM</li> </ul>"},{"location":"PROJECT_SETUP_CHEATSHEET/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>CDK Bootstrap Error: Check AWS credentials and region</li> <li>TypeScript Errors: Verify tsconfig.json and installed types</li> <li>Lambda Timeout: Increase timeout in CDK stack (default 3s)</li> <li>CORS Issues: Configure CORS in API Gateway</li> </ul>"},{"location":"PROJECT_STATUS/","title":"Project Status &amp; Progress Tracker","text":""},{"location":"PROJECT_STATUS/#current-status-foundation-complete","title":"\ud83d\udccb Current Status: Foundation Complete","text":"<p>Last Updated: 2025-09-13 Next Milestone: CDK Infrastructure &amp; LocalStack Integration</p>"},{"location":"PROJECT_STATUS/#project-overview","title":"\ud83c\udfaf Project Overview","text":"<p>Building a serverless multi-tenant authentication application using AWS services, CDK, TypeScript, and Docker for local development.</p>"},{"location":"PROJECT_STATUS/#architecture-stack","title":"Architecture Stack","text":"<ul> <li>Backend: Lambda functions (TypeScript, Node.js 20)</li> <li>Infrastructure: AWS CDK with TypeScript</li> <li>Frontend: Static SPA (planned)</li> <li>Database: DynamoDB via LocalStack</li> <li>Authentication: AWS Cognito (planned)</li> <li>API: API Gateway + Lambda</li> <li>Local Development: LocalStack + Docker</li> <li>Version Management: mise</li> </ul>"},{"location":"PROJECT_STATUS/#completed-components","title":"\u2705 Completed Components","text":""},{"location":"PROJECT_STATUS/#foundation-setup","title":"\ud83c\udfd7\ufe0f Foundation &amp; Setup","text":"<ul> <li>[x] Project Structure: Organized directories (backend, frontend, infrastructure)</li> <li>[x] Version Management: mise configuration with Node 20.11.0</li> <li>[x] Git Repository: Initialized with proper .gitignore</li> </ul>"},{"location":"PROJECT_STATUS/#backend-development","title":"\ud83d\udd27 Backend Development","text":"<ul> <li>[x] TypeScript Configuration: Optimized for Lambda Node 20 runtime</li> <li>[x] Package Management: package.json with build scripts</li> <li>[x] First Lambda Function: Basic \"Hello World\" handler with API Gateway integration</li> <li>[x] Build Pipeline: TypeScript compilation working</li> </ul>"},{"location":"PROJECT_STATUS/#docker-local-development","title":"\ud83d\udc33 Docker &amp; Local Development","text":"<ul> <li>[x] Multi-stage Dockerfile: Optimized for development and production</li> <li>[x] Docker Compose Structure: Base, dev, and prod configurations</li> <li>[x] LocalStack Integration: AWS services emulator configured</li> <li>[x] Test Container: Isolated test environment</li> <li>[x] Development Workflow: Hot reload and watch mode</li> </ul>"},{"location":"PROJECT_STATUS/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>[x] Setup Cheatsheet: Comprehensive project bootstrap guide</li> <li>[x] Docker Strategy: Multi-environment container setup</li> <li>[x] Project Tracking: This status document</li> </ul>"},{"location":"PROJECT_STATUS/#in-progress","title":"\ud83d\udea7 In Progress","text":""},{"location":"PROJECT_STATUS/#infrastructure-cdk","title":"\u2699\ufe0f Infrastructure (CDK)","text":"<ul> <li>[x] CDK Dependencies: Installed aws-cdk and aws-cdk-local via npm</li> <li>[x] CDK Stack Configuration: TypeScript stack configured for LocalStack</li> <li>[x] Lambda Integration: CDK construct pointing to compiled backend</li> <li>[x] API Gateway Setup: REST API with Lambda integration and CORS</li> <li>[ ] Local Deployment: Deploy and test with LocalStack (next step)</li> </ul>"},{"location":"PROJECT_STATUS/#upcoming-milestones","title":"\ud83d\udcc5 Upcoming Milestones","text":""},{"location":"PROJECT_STATUS/#phase-1-core-infrastructure-current","title":"Phase 1: Core Infrastructure (Current)","text":"<ul> <li>[ ] CDK + LocalStack: Deploy infrastructure locally</li> <li>[ ] API Testing: Verify Lambda + API Gateway integration</li> <li>[ ] Basic CRUD: Create user management endpoints</li> </ul>"},{"location":"PROJECT_STATUS/#phase-2-authentication-next","title":"Phase 2: Authentication (Next)","text":"<ul> <li>[ ] Cognito User Pool: User registration and authentication</li> <li>[ ] JWT Integration: Token-based authentication</li> <li>[ ] Protected Routes: Secured API endpoints</li> </ul>"},{"location":"PROJECT_STATUS/#phase-3-database-state","title":"Phase 3: Database &amp; State","text":"<ul> <li>[ ] DynamoDB Tables: User and application data</li> <li>[ ] Data Models: TypeScript interfaces and schemas</li> <li>[ ] CRUD Operations: Database interaction functions</li> </ul>"},{"location":"PROJECT_STATUS/#phase-4-frontend","title":"Phase 4: Frontend","text":"<ul> <li>[ ] Static SPA: HTML/CSS/JS or framework choice</li> <li>[ ] Authentication Flow: Login/signup forms</li> <li>[ ] Dashboard: User-specific interface</li> </ul>"},{"location":"PROJECT_STATUS/#phase-5-production-cicd","title":"Phase 5: Production &amp; CI/CD","text":"<ul> <li>[ ] GitHub Actions: Automated testing and deployment</li> <li>[ ] AWS Deployment: Real AWS environment</li> <li>[ ] Monitoring: CloudWatch dashboards and alerts</li> </ul>"},{"location":"PROJECT_STATUS/#current-development-environment","title":"\ud83d\udee0\ufe0f Current Development Environment","text":""},{"location":"PROJECT_STATUS/#local-services-running","title":"Local Services Running","text":"<pre><code># Development environment\ndocker-compose -f docker-compose.base.yml -f docker-compose.dev.yml up\n\n# Services:\n# - LocalStack: http://localhost:4566 (AWS services)\n# - Backend Dev: Hot reload TypeScript compilation\n# - Test Runner: Available with --profile test\n</code></pre>"},{"location":"PROJECT_STATUS/#file-structure","title":"File Structure","text":"<pre><code>serverless-auth-app/\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 src/index.ts          \u2705 Basic Lambda handler\n\u2502   \u251c\u2500\u2500 Dockerfile            \u2705 Multi-stage build\n\u2502   \u251c\u2500\u2500 package.json          \u2705 TypeScript + AWS deps\n\u2502   \u2514\u2500\u2500 tsconfig.json         \u2705 Lambda-optimized config\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u2514\u2500\u2500 lib/                  \ud83d\udea7 CDK stack (in progress)\n\u251c\u2500\u2500 docker-compose.base.yml   \u2705 Base services\n\u251c\u2500\u2500 docker-compose.dev.yml    \u2705 Development overrides  \n\u251c\u2500\u2500 docker-compose.prod.yml   \u2705 Production config\n\u251c\u2500\u2500 .tool-versions           \u2705 mise configuration\n\u2514\u2500\u2500 PROJECT_SETUP_CHEATSHEET.md \u2705 Bootstrap guide\n</code></pre>"},{"location":"PROJECT_STATUS/#next-immediate-steps","title":"\ud83c\udfaf Next Immediate Steps","text":"<ol> <li>Test Local Deployment (Current Priority)</li> <li>Deploy CDK stack to LocalStack</li> <li>Test API endpoint via curl/Postman</li> <li>Verify Lambda execution logs</li> <li> <p>Debug any deployment issues</p> </li> <li> <p>Enhance Lambda Functions</p> </li> <li>Add request validation and error handling</li> <li>Create additional endpoints (POST, PUT, DELETE)</li> <li> <p>Add structured logging</p> </li> <li> <p>Add Database Layer</p> </li> <li>Set up DynamoDB table via CDK</li> <li>Create user management Lambda functions</li> <li>Implement basic CRUD operations</li> </ol>"},{"location":"PROJECT_STATUS/#known-issues-blockers","title":"\ud83d\udea8 Known Issues &amp; Blockers","text":""},{"location":"PROJECT_STATUS/#resolved-issues","title":"Resolved Issues","text":"<ul> <li>\u2705 LocalStack volume mount error: Fixed with named volumes</li> <li>\u2705 TypeScript import errors: Configured module system for Lambda</li> <li>\u2705 Docker hot reload: Volume mounts working correctly</li> </ul>"},{"location":"PROJECT_STATUS/#current-blockers","title":"Current Blockers","text":"<ul> <li>None at the moment</li> </ul>"},{"location":"PROJECT_STATUS/#learning-objectives-progress","title":"\ud83d\udcc8 Learning Objectives Progress","text":"Objective Status Notes Serverless Architecture \ud83d\udfe1 In Progress Lambda + API Gateway foundation complete AWS CDK \ud83d\udfe1 In Progress Next milestone: LocalStack deployment TypeScript \u2705 Complete Configuration and compilation working Docker \u2705 Complete Multi-stage, multi-environment setup Local Development \u2705 Complete LocalStack + hot reload working Authentication \u23f3 Pending After infrastructure milestone CI/CD Practices \u23f3 Pending GitHub Actions phase Monitoring \u23f3 Pending CloudWatch integration phase"},{"location":"PROJECT_STATUS/#key-learnings-so-far","title":"\ud83d\udca1 Key Learnings So Far","text":""},{"location":"PROJECT_STATUS/#technical-insights","title":"Technical Insights","text":"<ul> <li>Lambda TypeScript Setup: CommonJS module system required for Lambda compatibility</li> <li>Docker Compose Strategy: Base + override pattern scales well for multi-environment</li> <li>LocalStack Benefits: Full AWS simulation enables true local development</li> <li>mise vs Global Tools: Version consistency crucial for team environments</li> </ul>"},{"location":"PROJECT_STATUS/#devops-best-practices-applied","title":"DevOps Best Practices Applied","text":"<ul> <li>Infrastructure as Code: CDK for reproducible deployments</li> <li>Containerization: Consistent environments across dev/prod</li> <li>Documentation: Living documentation for team knowledge sharing</li> <li>Version Pinning: Explicit tool versions prevent \"works on my machine\"</li> </ul>"},{"location":"PROJECT_STATUS/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":""},{"location":"PROJECT_STATUS/#current-daily-workflow","title":"Current Daily Workflow","text":"<pre><code># Start development environment\ndocker-compose -f docker-compose.base.yml -f docker-compose.dev.yml up\n\n# Make code changes (hot reload active)\n# Build and test\ncd backend &amp;&amp; npm run build &amp;&amp; npm test\n\n# Deploy to LocalStack (next milestone)\ncd infrastructure &amp;&amp; cdklocal deploy\n</code></pre>"},{"location":"PROJECT_STATUS/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit Tests: Jest in isolated container</li> <li>Integration Tests: Against LocalStack services  </li> <li>End-to-End: Full API workflow testing (planned)</li> </ul> <p>This document is updated as the project progresses. Check git history for detailed change tracking.</p>"}]}